from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.types import Contact, Location
from aiogram.filters import Command
from services import process_distance, phone_keyboard, confirm_keyboard, get_order_text, user_data, FormState, ADMIN_CHAT_IDS
from datetime import datetime

router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message):
    user_data[message.from_user.id] = {"state": FormState.TYPE_SELECTION}
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[
        KeyboardButton(text="–ü–æ –º—ñ—Å—Ç—É –õ—å–≤—ñ–≤"), KeyboardButton(text="–ó–∞ –º–µ–∂—ñ –º—ñ—Å—Ç–∞")
    ]])
    text = (
    "üöö <b>–ú–∞–∫—Å–∏–º—É–º –ø–µ—Ä–µ–≤–µ–∑–µ–Ω—å</b> ‚Äî –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ –≤–∞–Ω—Ç–∞–∂–Ω—ñ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è —É –õ—å–≤–æ–≤—ñ —Ç–∞ –∑–∞ –π–æ–≥–æ –º–µ–∂–∞–º–∏.\n\n"
    "–ú–∏ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ—Å—å –Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä–Ω–∏—Ö, –æ—Ñ—ñ—Å–Ω–∏—Ö —Ç–∞ —ñ–Ω—à–∏—Ö –≤–∏–¥–∞—Ö –ø–µ—Ä–µ—ó–∑–¥—ñ–≤ –∑ –≤–∞–Ω—Ç–∞–∂–Ω–∏–∫–∞–º–∏ –∞–±–æ –±–µ–∑.\n\n"
    "<b>–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è:</b>"
)
    await message.answer(text, reply_markup=keyboard)

@router.message(F.text.in_(["–ü–æ –º—ñ—Å—Ç—É –õ—å–≤—ñ–≤", "–ó–∞ –º–µ–∂—ñ –º—ñ—Å—Ç–∞"]))
async def type_selected(message: Message):
    uid = message.from_user.id
    if user_data.get(uid, {}).get("state") != FormState.TYPE_SELECTION:
        return
    user_data[uid]["type"] = message.text
    user_data[uid]["state"] = FormState.LOAD_LOCATION
    await message.answer("üìç –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–æ—á–∫—É <b>–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</b> (–ª–æ–∫–∞—Ü—ñ—è).", reply_markup=ReplyKeyboardRemove())

@router.message(F.location)
async def handle_location(message: Message):
    await process_distance(message)

@router.message(F.text.regexp(r'^\d+(\.\d+)?$'))
async def process_hours(message: Message):
    uid = message.from_user.id
    if user_data.get(uid, {}).get("state") != FormState.HOURS:
        return
    try:
        hours = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")
        return
    if hours < 2:
        hours = 2
    price = round(hours * 450 / 10) * 10
    user_data[uid]["hours"] = hours
    user_data[uid]["price"] = price
    user_data[uid]["state"] = FormState.PHONE
    await message.answer(f"–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {price} –≥—Ä–Ω. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.", reply_markup=phone_keyboard())

@router.message(F.contact)
async def handle_contact(message: Message):
    uid = message.from_user.id
    if message.contact.user_id != uid:
        await message.answer("–¶–µ –Ω–µ –≤–∞—à –Ω–æ–º–µ—Ä.")
        return
    user_data[uid]["phone"] = message.contact.phone_number
    user_data[uid]["state"] = FormState.CONFIRM
    await message.answer("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞—è–≤–∫—É?", reply_markup=confirm_keyboard())

@router.message(F.text == "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞—è–≤–∫—É")
async def handle_confirm(message: Message):
    uid = message.from_user.id
    if user_data.get(uid, {}).get("state") != FormState.CONFIRM:
        return
    order_text = get_order_text(uid, message.from_user)
    for admin in ADMIN_CHAT_IDS:
        await message.bot.send_message(admin, order_text)
    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –ó–∞—è–≤–∫—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    user_data.pop(uid, None)

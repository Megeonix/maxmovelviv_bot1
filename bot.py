import logging
import os
import asyncio
import math
import signal
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from keep_alive import keep_alive
import requests

API_TOKEN = os.getenv("BOT_TOKEN")
ORS_API_KEY = os.getenv("ORS_API_KEY")
ADMIN_CHAT_IDS = [1364324881, 591264759]
LVIV_CENTER = (49.8419, 24.0315)
CITY_RADIUS_KM = 10

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, default=types.DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

class Form(StatesGroup):
    TYPE = State()
    LOAD = State()
    DELIVER = State()
    HOURS = State()
    PHONE = State()
    CONFIRM = State()

user_data = {}
order_counter = 1

def get_distance_km(start, end):
    url = "https://api.openrouteservice.org/v2/directions/driving-car/geojson"
    headers = {"Authorization": ORS_API_KEY, "Content-Type": "application/json"}
    body = {"coordinates": [[start[1], start[0]], [end[1], end[0]]]}
    try:
        r = requests.post(url, headers=headers, json=body)
        r.raise_for_status()
        dist = r.json()["features"][0]["properties"]["segments"][0]["distance"]
        return dist / 1000
    except Exception as e:
        print("Distance error:", e)
        return None

def haversine(coord1, coord2):
    R = 6371
    lat1, lon1 = coord1
    lat2, lon2 = coord2
    phi1, phi2 = math.radians(lat1), math.radians(lat2)
    d_phi = math.radians(lat2 - lat1)
    d_lambda = math.radians(lon2 - lon1)
    a = math.sin(d_phi / 2) ** 2 + math.cos(phi1) * math.cos(phi2) * math.sin(d_lambda / 2) ** 2
    return R * (2 * math.atan2(math.sqrt(a), math.sqrt(1 - a)))

@dp.message(commands=["start"])
async def start(message: types.Message, state: FSMContext):
    await state.set_state(Form.TYPE)
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="–ü–æ –º—ñ—Å—Ç—É –õ—å–≤—ñ–≤"))
    kb.add(KeyboardButton(text="–ó–∞ –º–µ–∂—ñ –º—ñ—Å—Ç–∞"))
    await message.answer("üöö <b>–ú–∞–∫—Å–∏–º—É–º –ø–µ—Ä–µ–≤–µ–∑–µ–Ω—å</b>\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è:", reply_markup=kb.as_markup(resize_keyboard=True))

@dp.message(Form.TYPE)
async def select_type(message: types.Message, state: FSMContext):
    if message.text not in ["–ü–æ –º—ñ—Å—Ç—É –õ—å–≤—ñ–≤", "–ó–∞ –º–µ–∂—ñ –º—ñ—Å—Ç–∞"]:
        return await message.answer("–û–±–µ—Ä—ñ—Ç—å —ñ–∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.")
    await state.update_data(type=message.text)
    await state.set_state(Form.LOAD)
    await message.answer("üìç –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–æ—á–∫—É <b>–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</b>", reply_markup=types.ReplyKeyboardRemove())

@dp.message(Form.LOAD, content_types=["location"])
async def load_location(message: types.Message, state: FSMContext):
    await state.update_data(load=(message.location.latitude, message.location.longitude))
    await state.set_state(Form.DELIVER)
    await message.answer("üìç –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–æ—á–∫—É <b>–¥–æ—Å—Ç–∞–≤–∫–∏</b>")

@dp.message(Form.DELIVER, content_types=["location"])
async def deliver_location(message: types.Message, state: FSMContext):
    data = await state.get_data()
    load = data["load"]
    deliver = (message.location.latitude, message.location.longitude)
    dist = get_distance_km(load, deliver)
    if dist is None:
        return await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å.")
    await state.update_data(deliver=deliver, distance=dist)
    if data["type"] == "–ü–æ –º—ñ—Å—Ç—É –õ—å–≤—ñ–≤":
        await state.set_state(Form.HOURS)
        return await message.answer(f"–í—ñ–¥—Å—Ç–∞–Ω—å: {dist:.2f} –∫–º. –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω (–º—ñ–Ω. 2).")
    else:
        edge_dist = max(0, haversine(LVIV_CENTER, load) - CITY_RADIUS_KM)
        total_km = edge_dist + dist
        price = round((900 + total_km * 2 * 20) / 10) * 10
        await state.update_data(price=price)
        await state.set_state(Form.PHONE)
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, keyboard=[[KeyboardButton(text="üìû –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]])
        await message.answer(f"–í—ñ–¥—Å—Ç–∞–Ω—å: {dist:.2f} –∫–º. –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {price} –≥—Ä–Ω. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä:", reply_markup=kb)

@dp.message(Form.HOURS)
async def process_hours(message: types.Message, state: FSMContext):
    try:
        hours = float(message.text.replace(",", "."))
    except:
        return await message.answer("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")
    hours = max(2, hours)
    price = round((hours * 450) / 10) * 10
    await state.update_data(hours=hours, price=price)
    await state.set_state(Form.PHONE)
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, keyboard=[[KeyboardButton(text="üìû –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]])
    await message.answer(f"–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {price} –≥—Ä–Ω. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä:", reply_markup=kb)

@dp.message(Form.PHONE, content_types=["contact"])
async def contact_handler(message: types.Message, state: FSMContext):
    if message.contact.user_id != message.from_user.id:
        return await message.answer("–¶–µ –Ω–µ –≤–∞—à –Ω–æ–º–µ—Ä.")
    await state.update_data(phone=message.contact.phone_number)
    await state.set_state(Form.CONFIRM)
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, keyboard=[[KeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞—è–≤–∫—É")]])
    await message.answer("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞—è–≤–∫—É?", reply_markup=kb)

@dp.message(Form.CONFIRM)
async def confirm(message: types.Message, state: FSMContext):
    if message.text != "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞—è–≤–∫—É":
        return
    global order_counter
    data = await state.get_data()
    order_id = f"#{datetime.now().strftime('%Y%m%d')}-{order_counter}"
    order_counter += 1
    text = (
        f"üì¶ <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞</b> {order_id}\n"
        f"–¢–∏–ø: {data['type']}\n"
        f"–ó–≤—ñ–¥–∫–∏: <a href='https://maps.google.com/?q={data['load'][0]},{data['load'][1]}'>Google Maps</a>\n"
        f"–ö—É–¥–∏: <a href='https://maps.google.com/?q={data['deliver'][0]},{data['deliver'][1]}'>Google Maps</a>\n"
        f"–í—ñ–¥—Å—Ç–∞–Ω—å: {data['distance']:.2f} –∫–º\n"
        f"–¶—ñ–Ω–∞: {data['price']} –≥—Ä–Ω\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–ß–∞—Å: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    for admin_id in ADMIN_CHAT_IDS:
        await bot.send_message(admin_id, text, disable_web_page_preview=True)
    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –ó–∞—è–≤–∫—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    await state.clear()

async def main():
    keep_alive()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())